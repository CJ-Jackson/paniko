// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: error.go

package common

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockErrorService is a mock of ErrorService interface
type MockErrorService struct {
	ctrl     *gomock.Controller
	recorder *MockErrorServiceMockRecorder
}

// MockErrorServiceMockRecorder is the mock recorder for MockErrorService
type MockErrorServiceMockRecorder struct {
	mock *MockErrorService
}

// NewMockErrorService creates a new mock instance
func NewMockErrorService(ctrl *gomock.Controller) *MockErrorService {
	mock := &MockErrorService{ctrl: ctrl}
	mock.recorder = &MockErrorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockErrorService) EXPECT() *MockErrorServiceMockRecorder {
	return m.recorder
}

// CheckErrorAndPanic Mocks base method
func (m *MockErrorService) CheckErrorAndPanic(err error) {
	m.ctrl.Call(m, "CheckErrorAndPanic", err)
}

// CheckErrorAndPanic indicates an expected call of CheckErrorAndPanic
func (mr *MockErrorServiceMockRecorder) CheckErrorAndPanic(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckErrorAndPanic", reflect.TypeOf((*MockErrorService)(nil).CheckErrorAndPanic), err)
}

// CheckErrorAndLog Mocks base method
func (m *MockErrorService) CheckErrorAndLog(err error) {
	m.ctrl.Call(m, "CheckErrorAndLog", err)
}

// CheckErrorAndLog indicates an expected call of CheckErrorAndLog
func (mr *MockErrorServiceMockRecorder) CheckErrorAndLog(err interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckErrorAndLog", reflect.TypeOf((*MockErrorService)(nil).CheckErrorAndLog), err)
}
