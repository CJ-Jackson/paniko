// +build debug

// Code generated by MockGen. DO NOT EDIT.
// Source: password.go

package common

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPassword is a mock of Password interface
type MockPassword struct {
	ctrl     *gomock.Controller
	recorder *MockPasswordMockRecorder
}

// MockPasswordMockRecorder is the mock recorder for MockPassword
type MockPasswordMockRecorder struct {
	mock *MockPassword
}

// NewMockPassword creates a new mock instance
func NewMockPassword(ctrl *gomock.Controller) *MockPassword {
	mock := &MockPassword{ctrl: ctrl}
	mock.recorder = &MockPasswordMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPassword) EXPECT() *MockPasswordMockRecorder {
	return m.recorder
}

// SaltPassword mocks base method
func (m *MockPassword) SaltPassword(password string) string {
	ret := m.ctrl.Call(m, "SaltPassword", password)
	ret0, _ := ret[0].(string)
	return ret0
}

// SaltPassword indicates an expected call of SaltPassword
func (mr *MockPasswordMockRecorder) SaltPassword(password interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaltPassword", reflect.TypeOf((*MockPassword)(nil).SaltPassword), password)
}

// CheckPassword mocks base method
func (m *MockPassword) CheckPassword(password, hash string) bool {
	ret := m.ctrl.Call(m, "CheckPassword", password, hash)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckPassword indicates an expected call of CheckPassword
func (mr *MockPasswordMockRecorder) CheckPassword(password, hash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPassword", reflect.TypeOf((*MockPassword)(nil).CheckPassword), password, hash)
}
